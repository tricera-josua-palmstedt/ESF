/*
cgo stubs for package services.
File is generated by gopy. Do not edit.
gopy build -output=services_build ./services
*/

package main

/*

#cgo CFLAGS: -I/usr/include/python3.10 -Wno-error -Wno-implicit-function-declaration -Wno-int-conversion
#cgo LDFLAGS: -L/usr/lib -lpython3.10 -lcrypt -ldl  -lm -lm

// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}

*/
import "C"
import (
	"errors"
	"reflect"

	"github.com/go-python/gopy/gopyh" // handler

	"github.com/tricera-josua-palmstedt/ESF/services"
)

// main doesn't do anything in lib / pkg mode, but is essential for exe mode
func main() {

}

// initialization functions -- can be called from python after library is loaded
// GoPyInitRunFile runs a separate python file -- call in GoPyInit if it
// steals the main thread e.g., for GUI event loop, as in GoGi startup.

//export GoPyInit
func GoPyInit() {

}

// type for the handle -- int64 for speed (can switch to string)
type GoHandle int64
type CGoHandle C.longlong

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//
//export DecRef
func DecRef(handle CGoHandle) {
	gopyh.DecRef(gopyh.CGoHandle(handle))
}

// IncRef increments the reference count for the specified handle.
//
//export IncRef
func IncRef(handle CGoHandle) {
	gopyh.IncRef(gopyh.CGoHandle(handle))
}

// NumHandles returns the number of handles currently in use.
//
//export NumHandles
func NumHandles() int {
	return gopyh.NumHandles()
}

// boolGoToPy converts a Go bool to python-compatible C.char
func boolGoToPy(b bool) C.char {
	if b {
		return 1
	}
	return 0
}

// boolPyToGo converts a python-compatible C.Char to Go bool
func boolPyToGo(b C.char) bool {
	if b != 0 {
		return true
	}
	return false
}

func complex64GoToPy(c complex64) *C.PyObject {
	return C.PyComplex_FromDoubles(C.double(real(c)), C.double(imag(c)))
}

func complex64PyToGo(o *C.PyObject) complex64 {
	v := C.PyComplex_AsCComplex(o)
	return complex(float32(v.real), float32(v.imag))
}

func complex128GoToPy(c complex128) *C.PyObject {
	return C.PyComplex_FromDoubles(C.double(real(c)), C.double(imag(c)))
}

func complex128PyToGo(o *C.PyObject) complex128 {
	v := C.PyComplex_AsCComplex(o)
	return complex(float64(v.real), float64(v.imag))
}

// errorGoToPy converts a Go error to python-compatible C.CString
func errorGoToPy(e error) *C.char {
	if e != nil {
		return C.CString(e.Error())
	}
	return C.CString("")
}

// --- generated code for package: services below: ---

// ---- External Types Outside of Targeted Packages ---

// ---- Package: go ---

// ---- Types ---

// Converters for implicit pointer handles for type: []bool
func ptrFromHandle_Slice_bool(h CGoHandle) *[]bool {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]bool")
	if p == nil {
		return nil
	}
	return p.(*[]bool)
}
func deptrFromHandle_Slice_bool(h CGoHandle) []bool {
	p := ptrFromHandle_Slice_bool(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_bool(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]bool", p))
}

// --- wrapping slice: []bool ---
//
//export Slice_bool_CTor
func Slice_bool_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_bool(&[]bool{}))
}

//export Slice_bool_len
func Slice_bool_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_bool(handle))
}

//export Slice_bool_elem
func Slice_bool_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_bool(handle)
	return boolGoToPy(s[_idx])
}

//export Slice_bool_subslice
func Slice_bool_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_bool(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_bool(&ss))
}

//export Slice_bool_set
func Slice_bool_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_bool(handle)
	s[_idx] = boolPyToGo(_vl)
}

//export Slice_bool_append
func Slice_bool_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_bool(handle)
	*s = append(*s, boolPyToGo(_vl))
}

// Converters for implicit pointer handles for type: []byte
func ptrFromHandle_Slice_byte(h CGoHandle) *[]byte {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]byte")
	if p == nil {
		return nil
	}
	return p.(*[]byte)
}
func deptrFromHandle_Slice_byte(h CGoHandle) []byte {
	p := ptrFromHandle_Slice_byte(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_byte(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]byte", p))
}

// --- wrapping slice: []byte ---
//
//export Slice_byte_CTor
func Slice_byte_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_byte(&[]byte{}))
}

//export Slice_byte_len
func Slice_byte_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_byte(handle))
}

//export Slice_byte_elem
func Slice_byte_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_byte(handle)
	return C.char(s[_idx])
}

//export Slice_byte_subslice
func Slice_byte_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_byte(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_byte(&ss))
}

//export Slice_byte_set
func Slice_byte_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_byte(handle)
	s[_idx] = byte(_vl)
}

//export Slice_byte_append
func Slice_byte_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_byte(handle)
	*s = append(*s, byte(_vl))
}

// Converters for implicit pointer handles for type: []error
func ptrFromHandle_Slice_error(h CGoHandle) *[]error {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]error")
	if p == nil {
		return nil
	}
	return p.(*[]error)
}
func deptrFromHandle_Slice_error(h CGoHandle) []error {
	p := ptrFromHandle_Slice_error(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_error(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]error", p))
}

// --- wrapping slice: []error ---
//
//export Slice_error_CTor
func Slice_error_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_error(&[]error{}))
}

//export Slice_error_len
func Slice_error_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_error(handle))
}

//export Slice_error_elem
func Slice_error_elem(handle CGoHandle, _idx int) *C.char {
	s := deptrFromHandle_Slice_error(handle)
	return errorGoToPy(s[_idx])
}

//export Slice_error_subslice
func Slice_error_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_error(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_error(&ss))
}

//export Slice_error_set
func Slice_error_set(handle CGoHandle, _idx int, _vl *C.char) {
	s := deptrFromHandle_Slice_error(handle)
	s[_idx] = errors.New(C.GoString(_vl))
}

//export Slice_error_append
func Slice_error_append(handle CGoHandle, _vl *C.char) {
	s := ptrFromHandle_Slice_error(handle)
	*s = append(*s, errors.New(C.GoString(_vl)))
}

// Converters for implicit pointer handles for type: []float32
func ptrFromHandle_Slice_float32(h CGoHandle) *[]float32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]float32")
	if p == nil {
		return nil
	}
	return p.(*[]float32)
}
func deptrFromHandle_Slice_float32(h CGoHandle) []float32 {
	p := ptrFromHandle_Slice_float32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_float32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]float32", p))
}

// --- wrapping slice: []float32 ---
//
//export Slice_float32_CTor
func Slice_float32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_float32(&[]float32{}))
}

//export Slice_float32_len
func Slice_float32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_float32(handle))
}

//export Slice_float32_elem
func Slice_float32_elem(handle CGoHandle, _idx int) C.float {
	s := deptrFromHandle_Slice_float32(handle)
	return C.float(s[_idx])
}

//export Slice_float32_subslice
func Slice_float32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_float32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_float32(&ss))
}

//export Slice_float32_set
func Slice_float32_set(handle CGoHandle, _idx int, _vl C.float) {
	s := deptrFromHandle_Slice_float32(handle)
	s[_idx] = float32(_vl)
}

//export Slice_float32_append
func Slice_float32_append(handle CGoHandle, _vl C.float) {
	s := ptrFromHandle_Slice_float32(handle)
	*s = append(*s, float32(_vl))
}

// Converters for implicit pointer handles for type: []float64
func ptrFromHandle_Slice_float64(h CGoHandle) *[]float64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]float64")
	if p == nil {
		return nil
	}
	return p.(*[]float64)
}
func deptrFromHandle_Slice_float64(h CGoHandle) []float64 {
	p := ptrFromHandle_Slice_float64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_float64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]float64", p))
}

// --- wrapping slice: []float64 ---
//
//export Slice_float64_CTor
func Slice_float64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_float64(&[]float64{}))
}

//export Slice_float64_len
func Slice_float64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_float64(handle))
}

//export Slice_float64_elem
func Slice_float64_elem(handle CGoHandle, _idx int) C.double {
	s := deptrFromHandle_Slice_float64(handle)
	return C.double(s[_idx])
}

//export Slice_float64_subslice
func Slice_float64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_float64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_float64(&ss))
}

//export Slice_float64_set
func Slice_float64_set(handle CGoHandle, _idx int, _vl C.double) {
	s := deptrFromHandle_Slice_float64(handle)
	s[_idx] = float64(_vl)
}

//export Slice_float64_append
func Slice_float64_append(handle CGoHandle, _vl C.double) {
	s := ptrFromHandle_Slice_float64(handle)
	*s = append(*s, float64(_vl))
}

// Converters for implicit pointer handles for type: []int
func ptrFromHandle_Slice_int(h CGoHandle) *[]int {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int")
	if p == nil {
		return nil
	}
	return p.(*[]int)
}
func deptrFromHandle_Slice_int(h CGoHandle) []int {
	p := ptrFromHandle_Slice_int(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int", p))
}

// --- wrapping slice: []int ---
//
//export Slice_int_CTor
func Slice_int_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int(&[]int{}))
}

//export Slice_int_len
func Slice_int_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int(handle))
}

//export Slice_int_elem
func Slice_int_elem(handle CGoHandle, _idx int) C.longlong {
	s := deptrFromHandle_Slice_int(handle)
	return C.longlong(s[_idx])
}

//export Slice_int_subslice
func Slice_int_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int(&ss))
}

//export Slice_int_set
func Slice_int_set(handle CGoHandle, _idx int, _vl C.longlong) {
	s := deptrFromHandle_Slice_int(handle)
	s[_idx] = int(_vl)
}

//export Slice_int_append
func Slice_int_append(handle CGoHandle, _vl C.longlong) {
	s := ptrFromHandle_Slice_int(handle)
	*s = append(*s, int(_vl))
}

// Converters for implicit pointer handles for type: []int16
func ptrFromHandle_Slice_int16(h CGoHandle) *[]int16 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int16")
	if p == nil {
		return nil
	}
	return p.(*[]int16)
}
func deptrFromHandle_Slice_int16(h CGoHandle) []int16 {
	p := ptrFromHandle_Slice_int16(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int16(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int16", p))
}

// --- wrapping slice: []int16 ---
//
//export Slice_int16_CTor
func Slice_int16_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int16(&[]int16{}))
}

//export Slice_int16_len
func Slice_int16_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int16(handle))
}

//export Slice_int16_elem
func Slice_int16_elem(handle CGoHandle, _idx int) C.short {
	s := deptrFromHandle_Slice_int16(handle)
	return C.short(s[_idx])
}

//export Slice_int16_subslice
func Slice_int16_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int16(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int16(&ss))
}

//export Slice_int16_set
func Slice_int16_set(handle CGoHandle, _idx int, _vl C.short) {
	s := deptrFromHandle_Slice_int16(handle)
	s[_idx] = int16(_vl)
}

//export Slice_int16_append
func Slice_int16_append(handle CGoHandle, _vl C.short) {
	s := ptrFromHandle_Slice_int16(handle)
	*s = append(*s, int16(_vl))
}

// Converters for implicit pointer handles for type: []int32
func ptrFromHandle_Slice_int32(h CGoHandle) *[]int32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int32")
	if p == nil {
		return nil
	}
	return p.(*[]int32)
}
func deptrFromHandle_Slice_int32(h CGoHandle) []int32 {
	p := ptrFromHandle_Slice_int32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int32", p))
}

// --- wrapping slice: []int32 ---
//
//export Slice_int32_CTor
func Slice_int32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int32(&[]int32{}))
}

//export Slice_int32_len
func Slice_int32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int32(handle))
}

//export Slice_int32_elem
func Slice_int32_elem(handle CGoHandle, _idx int) C.long {
	s := deptrFromHandle_Slice_int32(handle)
	return C.long(s[_idx])
}

//export Slice_int32_subslice
func Slice_int32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int32(&ss))
}

//export Slice_int32_set
func Slice_int32_set(handle CGoHandle, _idx int, _vl C.long) {
	s := deptrFromHandle_Slice_int32(handle)
	s[_idx] = int32(_vl)
}

//export Slice_int32_append
func Slice_int32_append(handle CGoHandle, _vl C.long) {
	s := ptrFromHandle_Slice_int32(handle)
	*s = append(*s, int32(_vl))
}

// Converters for implicit pointer handles for type: []int64
func ptrFromHandle_Slice_int64(h CGoHandle) *[]int64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int64")
	if p == nil {
		return nil
	}
	return p.(*[]int64)
}
func deptrFromHandle_Slice_int64(h CGoHandle) []int64 {
	p := ptrFromHandle_Slice_int64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int64", p))
}

// --- wrapping slice: []int64 ---
//
//export Slice_int64_CTor
func Slice_int64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int64(&[]int64{}))
}

//export Slice_int64_len
func Slice_int64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int64(handle))
}

//export Slice_int64_elem
func Slice_int64_elem(handle CGoHandle, _idx int) C.longlong {
	s := deptrFromHandle_Slice_int64(handle)
	return C.longlong(s[_idx])
}

//export Slice_int64_subslice
func Slice_int64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int64(&ss))
}

//export Slice_int64_set
func Slice_int64_set(handle CGoHandle, _idx int, _vl C.longlong) {
	s := deptrFromHandle_Slice_int64(handle)
	s[_idx] = int64(_vl)
}

//export Slice_int64_append
func Slice_int64_append(handle CGoHandle, _vl C.longlong) {
	s := ptrFromHandle_Slice_int64(handle)
	*s = append(*s, int64(_vl))
}

// Converters for implicit pointer handles for type: []int8
func ptrFromHandle_Slice_int8(h CGoHandle) *[]int8 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]int8")
	if p == nil {
		return nil
	}
	return p.(*[]int8)
}
func deptrFromHandle_Slice_int8(h CGoHandle) []int8 {
	p := ptrFromHandle_Slice_int8(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_int8(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]int8", p))
}

// --- wrapping slice: []int8 ---
//
//export Slice_int8_CTor
func Slice_int8_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_int8(&[]int8{}))
}

//export Slice_int8_len
func Slice_int8_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_int8(handle))
}

//export Slice_int8_elem
func Slice_int8_elem(handle CGoHandle, _idx int) C.char {
	s := deptrFromHandle_Slice_int8(handle)
	return C.char(s[_idx])
}

//export Slice_int8_subslice
func Slice_int8_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_int8(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_int8(&ss))
}

//export Slice_int8_set
func Slice_int8_set(handle CGoHandle, _idx int, _vl C.char) {
	s := deptrFromHandle_Slice_int8(handle)
	s[_idx] = int8(_vl)
}

//export Slice_int8_append
func Slice_int8_append(handle CGoHandle, _vl C.char) {
	s := ptrFromHandle_Slice_int8(handle)
	*s = append(*s, int8(_vl))
}

// Converters for implicit pointer handles for type: []rune
func ptrFromHandle_Slice_rune(h CGoHandle) *[]rune {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]rune")
	if p == nil {
		return nil
	}
	return p.(*[]rune)
}
func deptrFromHandle_Slice_rune(h CGoHandle) []rune {
	p := ptrFromHandle_Slice_rune(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_rune(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]rune", p))
}

// --- wrapping slice: []rune ---
//
//export Slice_rune_CTor
func Slice_rune_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_rune(&[]rune{}))
}

//export Slice_rune_len
func Slice_rune_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_rune(handle))
}

//export Slice_rune_elem
func Slice_rune_elem(handle CGoHandle, _idx int) C.long {
	s := deptrFromHandle_Slice_rune(handle)
	return C.long(s[_idx])
}

//export Slice_rune_subslice
func Slice_rune_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_rune(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_rune(&ss))
}

//export Slice_rune_set
func Slice_rune_set(handle CGoHandle, _idx int, _vl C.long) {
	s := deptrFromHandle_Slice_rune(handle)
	s[_idx] = rune(_vl)
}

//export Slice_rune_append
func Slice_rune_append(handle CGoHandle, _vl C.long) {
	s := ptrFromHandle_Slice_rune(handle)
	*s = append(*s, rune(_vl))
}

// Converters for implicit pointer handles for type: []string
func ptrFromHandle_Slice_string(h CGoHandle) *[]string {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]string")
	if p == nil {
		return nil
	}
	return p.(*[]string)
}
func deptrFromHandle_Slice_string(h CGoHandle) []string {
	p := ptrFromHandle_Slice_string(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_string(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]string", p))
}

// --- wrapping slice: []string ---
//
//export Slice_string_CTor
func Slice_string_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_string(&[]string{}))
}

//export Slice_string_len
func Slice_string_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_string(handle))
}

//export Slice_string_elem
func Slice_string_elem(handle CGoHandle, _idx int) *C.char {
	s := deptrFromHandle_Slice_string(handle)
	return C.CString(s[_idx])
}

//export Slice_string_subslice
func Slice_string_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_string(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_string(&ss))
}

//export Slice_string_set
func Slice_string_set(handle CGoHandle, _idx int, _vl *C.char) {
	s := deptrFromHandle_Slice_string(handle)
	s[_idx] = C.GoString(_vl)
}

//export Slice_string_append
func Slice_string_append(handle CGoHandle, _vl *C.char) {
	s := ptrFromHandle_Slice_string(handle)
	*s = append(*s, C.GoString(_vl))
}

// Converters for implicit pointer handles for type: []uint
func ptrFromHandle_Slice_uint(h CGoHandle) *[]uint {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint")
	if p == nil {
		return nil
	}
	return p.(*[]uint)
}
func deptrFromHandle_Slice_uint(h CGoHandle) []uint {
	p := ptrFromHandle_Slice_uint(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint", p))
}

// --- wrapping slice: []uint ---
//
//export Slice_uint_CTor
func Slice_uint_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint(&[]uint{}))
}

//export Slice_uint_len
func Slice_uint_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint(handle))
}

//export Slice_uint_elem
func Slice_uint_elem(handle CGoHandle, _idx int) C.ulonglong {
	s := deptrFromHandle_Slice_uint(handle)
	return C.ulonglong(s[_idx])
}

//export Slice_uint_subslice
func Slice_uint_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint(&ss))
}

//export Slice_uint_set
func Slice_uint_set(handle CGoHandle, _idx int, _vl C.ulonglong) {
	s := deptrFromHandle_Slice_uint(handle)
	s[_idx] = uint(_vl)
}

//export Slice_uint_append
func Slice_uint_append(handle CGoHandle, _vl C.ulonglong) {
	s := ptrFromHandle_Slice_uint(handle)
	*s = append(*s, uint(_vl))
}

// Converters for implicit pointer handles for type: []uint16
func ptrFromHandle_Slice_uint16(h CGoHandle) *[]uint16 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint16")
	if p == nil {
		return nil
	}
	return p.(*[]uint16)
}
func deptrFromHandle_Slice_uint16(h CGoHandle) []uint16 {
	p := ptrFromHandle_Slice_uint16(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint16(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint16", p))
}

// --- wrapping slice: []uint16 ---
//
//export Slice_uint16_CTor
func Slice_uint16_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint16(&[]uint16{}))
}

//export Slice_uint16_len
func Slice_uint16_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint16(handle))
}

//export Slice_uint16_elem
func Slice_uint16_elem(handle CGoHandle, _idx int) C.ushort {
	s := deptrFromHandle_Slice_uint16(handle)
	return C.ushort(s[_idx])
}

//export Slice_uint16_subslice
func Slice_uint16_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint16(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint16(&ss))
}

//export Slice_uint16_set
func Slice_uint16_set(handle CGoHandle, _idx int, _vl C.ushort) {
	s := deptrFromHandle_Slice_uint16(handle)
	s[_idx] = uint16(_vl)
}

//export Slice_uint16_append
func Slice_uint16_append(handle CGoHandle, _vl C.ushort) {
	s := ptrFromHandle_Slice_uint16(handle)
	*s = append(*s, uint16(_vl))
}

// Converters for implicit pointer handles for type: []uint32
func ptrFromHandle_Slice_uint32(h CGoHandle) *[]uint32 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint32")
	if p == nil {
		return nil
	}
	return p.(*[]uint32)
}
func deptrFromHandle_Slice_uint32(h CGoHandle) []uint32 {
	p := ptrFromHandle_Slice_uint32(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint32(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint32", p))
}

// --- wrapping slice: []uint32 ---
//
//export Slice_uint32_CTor
func Slice_uint32_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint32(&[]uint32{}))
}

//export Slice_uint32_len
func Slice_uint32_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint32(handle))
}

//export Slice_uint32_elem
func Slice_uint32_elem(handle CGoHandle, _idx int) C.ulong {
	s := deptrFromHandle_Slice_uint32(handle)
	return C.ulong(s[_idx])
}

//export Slice_uint32_subslice
func Slice_uint32_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint32(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint32(&ss))
}

//export Slice_uint32_set
func Slice_uint32_set(handle CGoHandle, _idx int, _vl C.ulong) {
	s := deptrFromHandle_Slice_uint32(handle)
	s[_idx] = uint32(_vl)
}

//export Slice_uint32_append
func Slice_uint32_append(handle CGoHandle, _vl C.ulong) {
	s := ptrFromHandle_Slice_uint32(handle)
	*s = append(*s, uint32(_vl))
}

// Converters for implicit pointer handles for type: []uint64
func ptrFromHandle_Slice_uint64(h CGoHandle) *[]uint64 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint64")
	if p == nil {
		return nil
	}
	return p.(*[]uint64)
}
func deptrFromHandle_Slice_uint64(h CGoHandle) []uint64 {
	p := ptrFromHandle_Slice_uint64(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint64(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint64", p))
}

// --- wrapping slice: []uint64 ---
//
//export Slice_uint64_CTor
func Slice_uint64_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint64(&[]uint64{}))
}

//export Slice_uint64_len
func Slice_uint64_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint64(handle))
}

//export Slice_uint64_elem
func Slice_uint64_elem(handle CGoHandle, _idx int) C.ulonglong {
	s := deptrFromHandle_Slice_uint64(handle)
	return C.ulonglong(s[_idx])
}

//export Slice_uint64_subslice
func Slice_uint64_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint64(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint64(&ss))
}

//export Slice_uint64_set
func Slice_uint64_set(handle CGoHandle, _idx int, _vl C.ulonglong) {
	s := deptrFromHandle_Slice_uint64(handle)
	s[_idx] = uint64(_vl)
}

//export Slice_uint64_append
func Slice_uint64_append(handle CGoHandle, _vl C.ulonglong) {
	s := ptrFromHandle_Slice_uint64(handle)
	*s = append(*s, uint64(_vl))
}

// Converters for implicit pointer handles for type: []uint8
func ptrFromHandle_Slice_uint8(h CGoHandle) *[]uint8 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "[]uint8")
	if p == nil {
		return nil
	}
	return p.(*[]uint8)
}
func deptrFromHandle_Slice_uint8(h CGoHandle) []uint8 {
	p := ptrFromHandle_Slice_uint8(h)
	if p == nil {
		return nil
	}
	return *p
}
func handleFromPtr_Slice_uint8(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("[]uint8", p))
}

// --- wrapping slice: []uint8 ---
//
//export Slice_uint8_CTor
func Slice_uint8_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_Slice_uint8(&[]uint8{}))
}

//export Slice_uint8_len
func Slice_uint8_len(handle CGoHandle) int {
	return len(deptrFromHandle_Slice_uint8(handle))
}

//export Slice_uint8_elem
func Slice_uint8_elem(handle CGoHandle, _idx int) C.uchar {
	s := deptrFromHandle_Slice_uint8(handle)
	return C.uchar(s[_idx])
}

//export Slice_uint8_subslice
func Slice_uint8_subslice(handle CGoHandle, _st, _ed int) CGoHandle {
	s := deptrFromHandle_Slice_uint8(handle)
	ss := s[_st:_ed]
	return CGoHandle(handleFromPtr_Slice_uint8(&ss))
}

//export Slice_uint8_set
func Slice_uint8_set(handle CGoHandle, _idx int, _vl C.uchar) {
	s := deptrFromHandle_Slice_uint8(handle)
	s[_idx] = uint8(_vl)
}

//export Slice_uint8_append
func Slice_uint8_append(handle CGoHandle, _vl C.uchar) {
	s := ptrFromHandle_Slice_uint8(handle)
	*s = append(*s, uint8(_vl))
}

// ---- Package: services ---

// ---- Types ---

// Converters for pointer handles for type: *services.BatteryPowerControl
func ptrFromHandle_Ptr_services_BatteryPowerControl(h CGoHandle) *services.BatteryPowerControl {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*services.BatteryPowerControl")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(services.BatteryPowerControl{})).(*services.BatteryPowerControl)
}
func handleFromPtr_Ptr_services_BatteryPowerControl(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*services.BatteryPowerControl", p))
}

// Converters for pointer handles for type: *services.Limit
func ptrFromHandle_Ptr_services_Limit(h CGoHandle) *services.Limit {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*services.Limit")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(services.Limit{})).(*services.Limit)
}
func handleFromPtr_Ptr_services_Limit(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*services.Limit", p))
}

// Converters for pointer handles for type: *services.LoadPowerControl
func ptrFromHandle_Ptr_services_LoadPowerControl(h CGoHandle) *services.LoadPowerControl {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*services.LoadPowerControl")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(services.LoadPowerControl{})).(*services.LoadPowerControl)
}
func handleFromPtr_Ptr_services_LoadPowerControl(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*services.LoadPowerControl", p))
}

// Converters for pointer handles for type: *services.PO1_B1P1C1
func ptrFromHandle_Ptr_services_PO1_B1P1C1(h CGoHandle) *services.PO1_B1P1C1 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*services.PO1_B1P1C1")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(services.PO1_B1P1C1{})).(*services.PO1_B1P1C1)
}
func handleFromPtr_Ptr_services_PO1_B1P1C1(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*services.PO1_B1P1C1", p))
}

// Converters for pointer handles for type: *services.Parameter_PO1_B1P1C1
func ptrFromHandle_Ptr_services_Parameter_PO1_B1P1C1(h CGoHandle) *services.Parameter_PO1_B1P1C1 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*services.Parameter_PO1_B1P1C1")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(services.Parameter_PO1_B1P1C1{})).(*services.Parameter_PO1_B1P1C1)
}
func handleFromPtr_Ptr_services_Parameter_PO1_B1P1C1(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*services.Parameter_PO1_B1P1C1", p))
}

// Converters for pointer handles for type: *services.Poc
func ptrFromHandle_Ptr_services_Poc(h CGoHandle) *services.Poc {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*services.Poc")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(services.Poc{})).(*services.Poc)
}
func handleFromPtr_Ptr_services_Poc(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*services.Poc", p))
}

// Converters for pointer handles for type: *services.PvPowerControl
func ptrFromHandle_Ptr_services_PvPowerControl(h CGoHandle) *services.PvPowerControl {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*services.PvPowerControl")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(services.PvPowerControl{})).(*services.PvPowerControl)
}
func handleFromPtr_Ptr_services_PvPowerControl(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*services.PvPowerControl", p))
}

// Converters for pointer handles for type: *services.ServiceData
func ptrFromHandle_Ptr_services_ServiceData(h CGoHandle) *services.ServiceData {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*services.ServiceData")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(services.ServiceData{})).(*services.ServiceData)
}
func handleFromPtr_Ptr_services_ServiceData(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*services.ServiceData", p))
}

// Converters for pointer handles for type: *services.ServiceInit
func ptrFromHandle_Ptr_services_ServiceInit(h CGoHandle) *services.ServiceInit {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*services.ServiceInit")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(services.ServiceInit{})).(*services.ServiceInit)
}
func handleFromPtr_Ptr_services_ServiceInit(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*services.ServiceInit", p))
}

// Converters for pointer handles for type: *services.SocState
func ptrFromHandle_Ptr_services_SocState(h CGoHandle) *services.SocState {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "*services.SocState")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(services.SocState{})).(*services.SocState)
}
func handleFromPtr_Ptr_services_SocState(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("*services.SocState", p))
}

// Converters for non-pointer handles for type: services.BatteryPowerControl
func ptrFromHandle_services_BatteryPowerControl(h CGoHandle) *services.BatteryPowerControl {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "services.BatteryPowerControl")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(services.BatteryPowerControl{})).(*services.BatteryPowerControl)
}
func handleFromPtr_services_BatteryPowerControl(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("services.BatteryPowerControl", p))
}

// Converters for non-pointer handles for type: services.Limit
func ptrFromHandle_services_Limit(h CGoHandle) *services.Limit {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "services.Limit")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(services.Limit{})).(*services.Limit)
}
func handleFromPtr_services_Limit(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("services.Limit", p))
}

// Converters for non-pointer handles for type: services.LoadPowerControl
func ptrFromHandle_services_LoadPowerControl(h CGoHandle) *services.LoadPowerControl {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "services.LoadPowerControl")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(services.LoadPowerControl{})).(*services.LoadPowerControl)
}
func handleFromPtr_services_LoadPowerControl(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("services.LoadPowerControl", p))
}

// Converters for non-pointer handles for type: services.PO1_B1P1C1
func ptrFromHandle_services_PO1_B1P1C1(h CGoHandle) *services.PO1_B1P1C1 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "services.PO1_B1P1C1")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(services.PO1_B1P1C1{})).(*services.PO1_B1P1C1)
}
func handleFromPtr_services_PO1_B1P1C1(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("services.PO1_B1P1C1", p))
}

// Converters for non-pointer handles for type: services.Parameter_PO1_B1P1C1
func ptrFromHandle_services_Parameter_PO1_B1P1C1(h CGoHandle) *services.Parameter_PO1_B1P1C1 {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "services.Parameter_PO1_B1P1C1")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(services.Parameter_PO1_B1P1C1{})).(*services.Parameter_PO1_B1P1C1)
}
func handleFromPtr_services_Parameter_PO1_B1P1C1(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("services.Parameter_PO1_B1P1C1", p))
}

// Converters for non-pointer handles for type: services.Poc
func ptrFromHandle_services_Poc(h CGoHandle) *services.Poc {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "services.Poc")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(services.Poc{})).(*services.Poc)
}
func handleFromPtr_services_Poc(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("services.Poc", p))
}

// Converters for non-pointer handles for type: services.PvPowerControl
func ptrFromHandle_services_PvPowerControl(h CGoHandle) *services.PvPowerControl {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "services.PvPowerControl")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(services.PvPowerControl{})).(*services.PvPowerControl)
}
func handleFromPtr_services_PvPowerControl(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("services.PvPowerControl", p))
}

// Converters for non-pointer handles for type: services.ServiceData
func ptrFromHandle_services_ServiceData(h CGoHandle) *services.ServiceData {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "services.ServiceData")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(services.ServiceData{})).(*services.ServiceData)
}
func handleFromPtr_services_ServiceData(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("services.ServiceData", p))
}

// Converters for non-pointer handles for type: services.ServiceInit
func ptrFromHandle_services_ServiceInit(h CGoHandle) *services.ServiceInit {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "services.ServiceInit")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(services.ServiceInit{})).(*services.ServiceInit)
}
func handleFromPtr_services_ServiceInit(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("services.ServiceInit", p))
}

// Converters for non-pointer handles for type: services.SocState
func ptrFromHandle_services_SocState(h CGoHandle) *services.SocState {
	p := gopyh.VarFromHandle((gopyh.CGoHandle)(h), "services.SocState")
	if p == nil {
		return nil
	}
	return gopyh.Embed(p, reflect.TypeOf(services.SocState{})).(*services.SocState)
}
func handleFromPtr_services_SocState(p interface{}) CGoHandle {
	return CGoHandle(gopyh.Register("services.SocState", p))
}

// ---- Global Variables: can only use functions to access ---

// ---- Interfaces ---

// ---- Structs ---

// --- wrapping struct: services.PO1_B1P1C1 ---
//
//export services_PO1_B1P1C1_CTor
func services_PO1_B1P1C1_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_services_PO1_B1P1C1(&services.PO1_B1P1C1{}))
}

//export services_PO1_B1P1C1_Params_Get
func services_PO1_B1P1C1_Params_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_services_PO1_B1P1C1(handle)
	return handleFromPtr_services_Parameter_PO1_B1P1C1(&op.Params)
}

//export services_PO1_B1P1C1_Params_Set
func services_PO1_B1P1C1_Params_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_services_PO1_B1P1C1(handle)
	op.Params = *ptrFromHandle_services_Parameter_PO1_B1P1C1(val)
}

//export services_PO1_B1P1C1_Execute
func services_PO1_B1P1C1_Execute(_handle CGoHandle, input CGoHandle) CGoHandle {
	_saved_thread := C.PyEval_SaveThread()
	defer C.PyEval_RestoreThread(_saved_thread)
	vifc, __err := gopyh.VarFromHandleTry((gopyh.CGoHandle)(_handle), "*services.PO1_B1P1C1")
	if __err != nil {
		return handleFromPtr_services_ServiceData(nil)
	}
	cret := gopyh.Embed(vifc, reflect.TypeOf(services.PO1_B1P1C1{})).(*services.PO1_B1P1C1).Execute(*ptrFromHandle_services_ServiceData(input))

	return handleFromPtr_services_ServiceData(&cret)
}

// --- wrapping struct: services.ServiceData ---
//
//export services_ServiceData_CTor
func services_ServiceData_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_services_ServiceData(&services.ServiceData{}))
}

//export services_ServiceData_Poc_Get
func services_ServiceData_Poc_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_services_ServiceData(handle)
	return handleFromPtr_services_Poc(&op.Poc)
}

//export services_ServiceData_Poc_Set
func services_ServiceData_Poc_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_services_ServiceData(handle)
	op.Poc = *ptrFromHandle_services_Poc(val)
}

//export services_ServiceData_Battery_Get
func services_ServiceData_Battery_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_services_ServiceData(handle)
	return handleFromPtr_services_BatteryPowerControl(&op.Battery)
}

//export services_ServiceData_Battery_Set
func services_ServiceData_Battery_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_services_ServiceData(handle)
	op.Battery = *ptrFromHandle_services_BatteryPowerControl(val)
}

//export services_ServiceData_Pv_Get
func services_ServiceData_Pv_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_services_ServiceData(handle)
	return handleFromPtr_services_PvPowerControl(&op.Pv)
}

//export services_ServiceData_Pv_Set
func services_ServiceData_Pv_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_services_ServiceData(handle)
	op.Pv = *ptrFromHandle_services_PvPowerControl(val)
}

//export services_ServiceData_Load_Get
func services_ServiceData_Load_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_services_ServiceData(handle)
	return handleFromPtr_services_LoadPowerControl(&op.Load)
}

//export services_ServiceData_Load_Set
func services_ServiceData_Load_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_services_ServiceData(handle)
	op.Load = *ptrFromHandle_services_LoadPowerControl(val)
}

// --- wrapping struct: services.ServiceInit ---
//
//export services_ServiceInit_CTor
func services_ServiceInit_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_services_ServiceInit(&services.ServiceInit{}))
}

//export services_ServiceInit_Name_Get
func services_ServiceInit_Name_Get(handle CGoHandle) *C.char {
	op := ptrFromHandle_services_ServiceInit(handle)
	return C.CString(op.Name)
}

//export services_ServiceInit_Name_Set
func services_ServiceInit_Name_Set(handle CGoHandle, val *C.char) {
	op := ptrFromHandle_services_ServiceInit(handle)
	op.Name = C.GoString(val)
}

//export services_ServiceInit_Parameter_Get
func services_ServiceInit_Parameter_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_services_ServiceInit(handle)
	return handleFromPtr_services_Parameter_PO1_B1P1C1(&op.Parameter)
}

//export services_ServiceInit_Parameter_Set
func services_ServiceInit_Parameter_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_services_ServiceInit(handle)
	op.Parameter = *ptrFromHandle_services_Parameter_PO1_B1P1C1(val)
}

// --- wrapping struct: services.BatteryPowerControl ---
//
//export services_BatteryPowerControl_CTor
func services_BatteryPowerControl_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_services_BatteryPowerControl(&services.BatteryPowerControl{}))
}

//export services_BatteryPowerControl_P_Get
func services_BatteryPowerControl_P_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_BatteryPowerControl(handle)
	return C.double(op.P)
}

//export services_BatteryPowerControl_P_Set
func services_BatteryPowerControl_P_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_BatteryPowerControl(handle)
	op.P = float64(val)
}

//export services_BatteryPowerControl_PSet_Get
func services_BatteryPowerControl_PSet_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_BatteryPowerControl(handle)
	return C.double(op.PSet)
}

//export services_BatteryPowerControl_PSet_Set
func services_BatteryPowerControl_PSet_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_BatteryPowerControl(handle)
	op.PSet = float64(val)
}

//export services_BatteryPowerControl_PPriority_Get
func services_BatteryPowerControl_PPriority_Get(handle CGoHandle) C.ulonglong {
	op := ptrFromHandle_services_BatteryPowerControl(handle)
	return C.ulonglong(op.PPriority)
}

//export services_BatteryPowerControl_PPriority_Set
func services_BatteryPowerControl_PPriority_Set(handle CGoHandle, val C.ulonglong) {
	op := ptrFromHandle_services_BatteryPowerControl(handle)
	op.PPriority = uint(val)
}

//export services_BatteryPowerControl_Q_Get
func services_BatteryPowerControl_Q_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_BatteryPowerControl(handle)
	return C.double(op.Q)
}

//export services_BatteryPowerControl_Q_Set
func services_BatteryPowerControl_Q_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_BatteryPowerControl(handle)
	op.Q = float64(val)
}

//export services_BatteryPowerControl_Soc_Get
func services_BatteryPowerControl_Soc_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_BatteryPowerControl(handle)
	return C.double(op.Soc)
}

//export services_BatteryPowerControl_Soc_Set
func services_BatteryPowerControl_Soc_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_BatteryPowerControl(handle)
	op.Soc = float64(val)
}

//export services_BatteryPowerControl_SocMax_Get
func services_BatteryPowerControl_SocMax_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_BatteryPowerControl(handle)
	return C.double(op.SocMax)
}

//export services_BatteryPowerControl_SocMax_Set
func services_BatteryPowerControl_SocMax_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_BatteryPowerControl(handle)
	op.SocMax = float64(val)
}

//export services_BatteryPowerControl_SocMin_Get
func services_BatteryPowerControl_SocMin_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_BatteryPowerControl(handle)
	return C.double(op.SocMin)
}

//export services_BatteryPowerControl_SocMin_Set
func services_BatteryPowerControl_SocMin_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_BatteryPowerControl(handle)
	op.SocMin = float64(val)
}

//export services_BatteryPowerControl_ENom_Get
func services_BatteryPowerControl_ENom_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_BatteryPowerControl(handle)
	return C.double(op.ENom)
}

//export services_BatteryPowerControl_ENom_Set
func services_BatteryPowerControl_ENom_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_BatteryPowerControl(handle)
	op.ENom = float64(val)
}

//export services_BatteryPowerControl_Limit_Get
func services_BatteryPowerControl_Limit_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_services_BatteryPowerControl(handle)
	return handleFromPtr_services_Limit(&op.Limit)
}

//export services_BatteryPowerControl_Limit_Set
func services_BatteryPowerControl_Limit_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_services_BatteryPowerControl(handle)
	op.Limit = *ptrFromHandle_services_Limit(val)
}

// --- wrapping struct: services.Limit ---
//
//export services_Limit_CTor
func services_Limit_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_services_Limit(&services.Limit{}))
}

//export services_Limit_PMax_Get
func services_Limit_PMax_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_Limit(handle)
	return C.double(op.PMax)
}

//export services_Limit_PMax_Set
func services_Limit_PMax_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_Limit(handle)
	op.PMax = float64(val)
}

//export services_Limit_PMin_Get
func services_Limit_PMin_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_Limit(handle)
	return C.double(op.PMin)
}

//export services_Limit_PMin_Set
func services_Limit_PMin_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_Limit(handle)
	op.PMin = float64(val)
}

//export services_Limit_SMax_Get
func services_Limit_SMax_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_Limit(handle)
	return C.double(op.SMax)
}

//export services_Limit_SMax_Set
func services_Limit_SMax_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_Limit(handle)
	op.SMax = float64(val)
}

//export services_Limit_PFromGrid_Get
func services_Limit_PFromGrid_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_Limit(handle)
	return C.double(op.PFromGrid)
}

//export services_Limit_PFromGrid_Set
func services_Limit_PFromGrid_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_Limit(handle)
	op.PFromGrid = float64(val)
}

//export services_Limit_PConsumptionMin_Get
func services_Limit_PConsumptionMin_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_Limit(handle)
	return C.double(op.PConsumptionMin)
}

//export services_Limit_PConsumptionMin_Set
func services_Limit_PConsumptionMin_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_Limit(handle)
	op.PConsumptionMin = float64(val)
}

// --- wrapping struct: services.LoadPowerControl ---
//
//export services_LoadPowerControl_CTor
func services_LoadPowerControl_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_services_LoadPowerControl(&services.LoadPowerControl{}))
}

//export services_LoadPowerControl_P_Get
func services_LoadPowerControl_P_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_LoadPowerControl(handle)
	return C.double(op.P)
}

//export services_LoadPowerControl_P_Set
func services_LoadPowerControl_P_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_LoadPowerControl(handle)
	op.P = float64(val)
}

//export services_LoadPowerControl_PSet_Get
func services_LoadPowerControl_PSet_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_LoadPowerControl(handle)
	return C.double(op.PSet)
}

//export services_LoadPowerControl_PSet_Set
func services_LoadPowerControl_PSet_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_LoadPowerControl(handle)
	op.PSet = float64(val)
}

//export services_LoadPowerControl_PPriority_Get
func services_LoadPowerControl_PPriority_Get(handle CGoHandle) C.ulonglong {
	op := ptrFromHandle_services_LoadPowerControl(handle)
	return C.ulonglong(op.PPriority)
}

//export services_LoadPowerControl_PPriority_Set
func services_LoadPowerControl_PPriority_Set(handle CGoHandle, val C.ulonglong) {
	op := ptrFromHandle_services_LoadPowerControl(handle)
	op.PPriority = uint(val)
}

//export services_LoadPowerControl_Q_Get
func services_LoadPowerControl_Q_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_LoadPowerControl(handle)
	return C.double(op.Q)
}

//export services_LoadPowerControl_Q_Set
func services_LoadPowerControl_Q_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_LoadPowerControl(handle)
	op.Q = float64(val)
}

//export services_LoadPowerControl_PMax_Get
func services_LoadPowerControl_PMax_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_LoadPowerControl(handle)
	return C.double(op.PMax)
}

//export services_LoadPowerControl_PMax_Set
func services_LoadPowerControl_PMax_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_LoadPowerControl(handle)
	op.PMax = float64(val)
}

//export services_LoadPowerControl_PMin_Get
func services_LoadPowerControl_PMin_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_LoadPowerControl(handle)
	return C.double(op.PMin)
}

//export services_LoadPowerControl_PMin_Set
func services_LoadPowerControl_PMin_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_LoadPowerControl(handle)
	op.PMin = float64(val)
}

//export services_LoadPowerControl_PFromGrid_Get
func services_LoadPowerControl_PFromGrid_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_LoadPowerControl(handle)
	return C.double(op.PFromGrid)
}

//export services_LoadPowerControl_PFromGrid_Set
func services_LoadPowerControl_PFromGrid_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_LoadPowerControl(handle)
	op.PFromGrid = float64(val)
}

//export services_LoadPowerControl_PConsumptionMin_Get
func services_LoadPowerControl_PConsumptionMin_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_LoadPowerControl(handle)
	return C.double(op.PConsumptionMin)
}

//export services_LoadPowerControl_PConsumptionMin_Set
func services_LoadPowerControl_PConsumptionMin_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_LoadPowerControl(handle)
	op.PConsumptionMin = float64(val)
}

// --- wrapping struct: services.Parameter_PO1_B1P1C1 ---
//
//export services_Parameter_PO1_B1P1C1_CTor
func services_Parameter_PO1_B1P1C1_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_services_Parameter_PO1_B1P1C1(&services.Parameter_PO1_B1P1C1{}))
}

//export services_Parameter_PO1_B1P1C1_SocTarget_Get
func services_Parameter_PO1_B1P1C1_SocTarget_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_Parameter_PO1_B1P1C1(handle)
	return C.double(op.SocTarget)
}

//export services_Parameter_PO1_B1P1C1_SocTarget_Set
func services_Parameter_PO1_B1P1C1_SocTarget_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_Parameter_PO1_B1P1C1(handle)
	op.SocTarget = float64(val)
}

//export services_Parameter_PO1_B1P1C1_SocReserve_Get
func services_Parameter_PO1_B1P1C1_SocReserve_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_Parameter_PO1_B1P1C1(handle)
	return C.double(op.SocReserve)
}

//export services_Parameter_PO1_B1P1C1_SocReserve_Set
func services_Parameter_PO1_B1P1C1_SocReserve_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_Parameter_PO1_B1P1C1(handle)
	op.SocReserve = float64(val)
}

//export services_Parameter_PO1_B1P1C1_DsocTargetHyst_Get
func services_Parameter_PO1_B1P1C1_DsocTargetHyst_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_Parameter_PO1_B1P1C1(handle)
	return C.double(op.DsocTargetHyst)
}

//export services_Parameter_PO1_B1P1C1_DsocTargetHyst_Set
func services_Parameter_PO1_B1P1C1_DsocTargetHyst_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_Parameter_PO1_B1P1C1(handle)
	op.DsocTargetHyst = float64(val)
}

//export services_Parameter_PO1_B1P1C1_PCutConsumption_Get
func services_Parameter_PO1_B1P1C1_PCutConsumption_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_Parameter_PO1_B1P1C1(handle)
	return C.double(op.PCutConsumption)
}

//export services_Parameter_PO1_B1P1C1_PCutConsumption_Set
func services_Parameter_PO1_B1P1C1_PCutConsumption_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_Parameter_PO1_B1P1C1(handle)
	op.PCutConsumption = float64(val)
}

//export services_Parameter_PO1_B1P1C1_PReserve_Get
func services_Parameter_PO1_B1P1C1_PReserve_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_Parameter_PO1_B1P1C1(handle)
	return C.double(op.PReserve)
}

//export services_Parameter_PO1_B1P1C1_PReserve_Set
func services_Parameter_PO1_B1P1C1_PReserve_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_Parameter_PO1_B1P1C1(handle)
	op.PReserve = float64(val)
}

//export services_Parameter_PO1_B1P1C1_BatInjectionToGridAllowed_Get
func services_Parameter_PO1_B1P1C1_BatInjectionToGridAllowed_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_services_Parameter_PO1_B1P1C1(handle)
	return boolGoToPy(op.BatInjectionToGridAllowed)
}

//export services_Parameter_PO1_B1P1C1_BatInjectionToGridAllowed_Set
func services_Parameter_PO1_B1P1C1_BatInjectionToGridAllowed_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_services_Parameter_PO1_B1P1C1(handle)
	op.BatInjectionToGridAllowed = boolPyToGo(val)
}

//export services_Parameter_PO1_B1P1C1_DpPvControl_Get
func services_Parameter_PO1_B1P1C1_DpPvControl_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_Parameter_PO1_B1P1C1(handle)
	return C.double(op.DpPvControl)
}

//export services_Parameter_PO1_B1P1C1_DpPvControl_Set
func services_Parameter_PO1_B1P1C1_DpPvControl_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_Parameter_PO1_B1P1C1(handle)
	op.DpPvControl = float64(val)
}

// --- wrapping struct: services.Poc ---
//
//export services_Poc_CTor
func services_Poc_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_services_Poc(&services.Poc{}))
}

//export services_Poc_P_Get
func services_Poc_P_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_Poc(handle)
	return C.double(op.P)
}

//export services_Poc_P_Set
func services_Poc_P_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_Poc(handle)
	op.P = float64(val)
}

//export services_Poc_PSet_Get
func services_Poc_PSet_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_Poc(handle)
	return C.double(op.PSet)
}

//export services_Poc_PSet_Set
func services_Poc_PSet_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_Poc(handle)
	op.PSet = float64(val)
}

//export services_Poc_PPriority_Get
func services_Poc_PPriority_Get(handle CGoHandle) C.ulonglong {
	op := ptrFromHandle_services_Poc(handle)
	return C.ulonglong(op.PPriority)
}

//export services_Poc_PPriority_Set
func services_Poc_PPriority_Set(handle CGoHandle, val C.ulonglong) {
	op := ptrFromHandle_services_Poc(handle)
	op.PPriority = uint(val)
}

//export services_Poc_Q_Get
func services_Poc_Q_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_Poc(handle)
	return C.double(op.Q)
}

//export services_Poc_Q_Set
func services_Poc_Q_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_Poc(handle)
	op.Q = float64(val)
}

//export services_Poc_Limit_Get
func services_Poc_Limit_Get(handle CGoHandle) CGoHandle {
	op := ptrFromHandle_services_Poc(handle)
	return handleFromPtr_services_Limit(&op.Limit)
}

//export services_Poc_Limit_Set
func services_Poc_Limit_Set(handle CGoHandle, val CGoHandle) {
	op := ptrFromHandle_services_Poc(handle)
	op.Limit = *ptrFromHandle_services_Limit(val)
}

// --- wrapping struct: services.PvPowerControl ---
//
//export services_PvPowerControl_CTor
func services_PvPowerControl_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_services_PvPowerControl(&services.PvPowerControl{}))
}

//export services_PvPowerControl_P_Get
func services_PvPowerControl_P_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_PvPowerControl(handle)
	return C.double(op.P)
}

//export services_PvPowerControl_P_Set
func services_PvPowerControl_P_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_PvPowerControl(handle)
	op.P = float64(val)
}

//export services_PvPowerControl_PSet_Get
func services_PvPowerControl_PSet_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_PvPowerControl(handle)
	return C.double(op.PSet)
}

//export services_PvPowerControl_PSet_Set
func services_PvPowerControl_PSet_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_PvPowerControl(handle)
	op.PSet = float64(val)
}

//export services_PvPowerControl_PPriority_Get
func services_PvPowerControl_PPriority_Get(handle CGoHandle) C.ulonglong {
	op := ptrFromHandle_services_PvPowerControl(handle)
	return C.ulonglong(op.PPriority)
}

//export services_PvPowerControl_PPriority_Set
func services_PvPowerControl_PPriority_Set(handle CGoHandle, val C.ulonglong) {
	op := ptrFromHandle_services_PvPowerControl(handle)
	op.PPriority = uint(val)
}

//export services_PvPowerControl_Q_Get
func services_PvPowerControl_Q_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_PvPowerControl(handle)
	return C.double(op.Q)
}

//export services_PvPowerControl_Q_Set
func services_PvPowerControl_Q_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_PvPowerControl(handle)
	op.Q = float64(val)
}

//export services_PvPowerControl_PMax_Get
func services_PvPowerControl_PMax_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_PvPowerControl(handle)
	return C.double(op.PMax)
}

//export services_PvPowerControl_PMax_Set
func services_PvPowerControl_PMax_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_PvPowerControl(handle)
	op.PMax = float64(val)
}

//export services_PvPowerControl_PMin_Get
func services_PvPowerControl_PMin_Get(handle CGoHandle) C.double {
	op := ptrFromHandle_services_PvPowerControl(handle)
	return C.double(op.PMin)
}

//export services_PvPowerControl_PMin_Set
func services_PvPowerControl_PMin_Set(handle CGoHandle, val C.double) {
	op := ptrFromHandle_services_PvPowerControl(handle)
	op.PMin = float64(val)
}

// --- wrapping struct: services.SocState ---
//
//export services_SocState_CTor
func services_SocState_CTor() CGoHandle {
	return CGoHandle(handleFromPtr_services_SocState(&services.SocState{}))
}

//export services_SocState_SocBelowTarget_Get
func services_SocState_SocBelowTarget_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_services_SocState(handle)
	return boolGoToPy(op.SocBelowTarget)
}

//export services_SocState_SocBelowTarget_Set
func services_SocState_SocBelowTarget_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_services_SocState(handle)
	op.SocBelowTarget = boolPyToGo(val)
}

//export services_SocState_SocBelowReserve_Get
func services_SocState_SocBelowReserve_Get(handle CGoHandle) C.char {
	op := ptrFromHandle_services_SocState(handle)
	return boolGoToPy(op.SocBelowReserve)
}

//export services_SocState_SocBelowReserve_Set
func services_SocState_SocBelowReserve_Set(handle CGoHandle, val C.char) {
	op := ptrFromHandle_services_SocState(handle)
	op.SocBelowReserve = boolPyToGo(val)
}

// ---- Slices ---

// ---- Maps ---

// ---- Constructors ---

// ---- Functions ---
