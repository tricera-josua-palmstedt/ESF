# Makefile for python interface for package services.
# File is generated by gopy. Do not edit.
# gopy build -output=services_build ./services

GOCMD=go
GOBUILD=$(GOCMD) build -mod=mod
GOIMPORTS=goimports
PYTHON=/home/jpalms/code/tricera/ESF/.direnv/python-3.10.9/bin/python
LIBEXT=.so

# get the CC and flags used to build python:
GCC = $(shell $(GOCMD) env CC)
CFLAGS = -I/usr/include/python3.10
LDFLAGS = -L/usr/lib -lpython3.10 -lcrypt -ldl  -lm -lm

all: gen build

gen:
	gopy gen -no-make ./services

build:
	# build target builds the generated files -- this is what gopy build does..
	# this will otherwise be built during go build and may be out of date
	- rm services.c
	# goimports is needed to ensure that the imports list is valid
	$(GOIMPORTS) -w services.go
	# generate services_go$(LIBEXT) from services.go -- the cgo wrappers to go functions
	$(GOBUILD) -buildmode=c-shared -o services_go$(LIBEXT) services.go
	# use pybindgen to build the services.c file which are the CPython wrappers to cgo wrappers..
	# note: pip install pybindgen to get pybindgen if this fails
	$(PYTHON) build.py
	# build the _services$(LIBEXT) library that contains the cgo and CPython wrappers
	# generated services.py python wrapper imports this c-code package
	
	$(GCC) services.c  services_go$(LIBEXT) -o _services$(LIBEXT) $(CFLAGS) $(LDFLAGS) -fPIC --shared -w
	


