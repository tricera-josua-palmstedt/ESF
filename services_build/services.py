
# python wrapper for package github.com/tricera-josua-palmstedt/ESF/services within overall package services
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy build -output=services_build ./services

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _services
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from services import services
# and then refer to everything using services. prefix
# packages imported by this package listed below:




# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---

# Python type for struct services.PO1_B1P1C1
class PO1_B1P1C1(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_services.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_services.IncRef(self.handle)
		else:
			self.handle = _services.services_PO1_B1P1C1_CTor()
			_services.IncRef(self.handle)
			if  0 < len(args):
				self.Params = args[0]
			if "Params" in kwargs:
				self.Params = kwargs["Params"]
	def __del__(self):
		_services.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'services.PO1_B1P1C1{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'services.PO1_B1P1C1 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Params(self):
		return Parameter_PO1_B1P1C1(handle=_services.services_PO1_B1P1C1_Params_Get(self.handle))
	@Params.setter
	def Params(self, value):
		if isinstance(value, go.GoClass):
			_services.services_PO1_B1P1C1_Params_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	def Execute(self, input):
		"""Execute(object input) object output"""
		return ServiceData(handle=_services.services_PO1_B1P1C1_Execute(self.handle, input.handle))

# Python type for struct services.ServiceData
class ServiceData(go.GoClass):
	"""\ttype ServiceData struct {\n\t\tpoc       Poc\n\t\tBatteries []*energy.BatteryPowerControl\n\t\tPvs       []*energy.PvPowerControl\n\t\tLoads     []*energy.LoadPowerControl\n\t}\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_services.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_services.IncRef(self.handle)
		else:
			self.handle = _services.services_ServiceData_CTor()
			_services.IncRef(self.handle)
			if  0 < len(args):
				self.Poc = args[0]
			if "Poc" in kwargs:
				self.Poc = kwargs["Poc"]
			if  1 < len(args):
				self.Battery = args[1]
			if "Battery" in kwargs:
				self.Battery = kwargs["Battery"]
			if  2 < len(args):
				self.Pv = args[2]
			if "Pv" in kwargs:
				self.Pv = kwargs["Pv"]
			if  3 < len(args):
				self.Load = args[3]
			if "Load" in kwargs:
				self.Load = kwargs["Load"]
	def __del__(self):
		_services.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'services.ServiceData{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'services.ServiceData ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Poc(self):
		return Poc(handle=_services.services_ServiceData_Poc_Get(self.handle))
	@Poc.setter
	def Poc(self, value):
		if isinstance(value, go.GoClass):
			_services.services_ServiceData_Poc_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def Battery(self):
		return BatteryPowerControl(handle=_services.services_ServiceData_Battery_Get(self.handle))
	@Battery.setter
	def Battery(self, value):
		if isinstance(value, go.GoClass):
			_services.services_ServiceData_Battery_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def Pv(self):
		return PvPowerControl(handle=_services.services_ServiceData_Pv_Get(self.handle))
	@Pv.setter
	def Pv(self, value):
		if isinstance(value, go.GoClass):
			_services.services_ServiceData_Pv_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def Load(self):
		return LoadPowerControl(handle=_services.services_ServiceData_Load_Get(self.handle))
	@Load.setter
	def Load(self, value):
		if isinstance(value, go.GoClass):
			_services.services_ServiceData_Load_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))

# Python type for struct services.ServiceInit
class ServiceInit(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_services.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_services.IncRef(self.handle)
		else:
			self.handle = _services.services_ServiceInit_CTor()
			_services.IncRef(self.handle)
			if  0 < len(args):
				self.Name = args[0]
			if "Name" in kwargs:
				self.Name = kwargs["Name"]
			if  1 < len(args):
				self.Parameter = args[1]
			if "Parameter" in kwargs:
				self.Parameter = kwargs["Parameter"]
	def __del__(self):
		_services.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'services.ServiceInit{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'services.ServiceInit ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Name(self):
		return _services.services_ServiceInit_Name_Get(self.handle)
	@Name.setter
	def Name(self, value):
		if isinstance(value, go.GoClass):
			_services.services_ServiceInit_Name_Set(self.handle, value.handle)
		else:
			_services.services_ServiceInit_Name_Set(self.handle, value)
	@property
	def Parameter(self):
		return Parameter_PO1_B1P1C1(handle=_services.services_ServiceInit_Parameter_Get(self.handle))
	@Parameter.setter
	def Parameter(self, value):
		if isinstance(value, go.GoClass):
			_services.services_ServiceInit_Parameter_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))

# Python type for struct services.BatteryPowerControl
class BatteryPowerControl(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_services.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_services.IncRef(self.handle)
		else:
			self.handle = _services.services_BatteryPowerControl_CTor()
			_services.IncRef(self.handle)
			if  0 < len(args):
				self.P = args[0]
			if "P" in kwargs:
				self.P = kwargs["P"]
			if  1 < len(args):
				self.PSet = args[1]
			if "PSet" in kwargs:
				self.PSet = kwargs["PSet"]
			if  2 < len(args):
				self.PPriority = args[2]
			if "PPriority" in kwargs:
				self.PPriority = kwargs["PPriority"]
			if  3 < len(args):
				self.Q = args[3]
			if "Q" in kwargs:
				self.Q = kwargs["Q"]
			if  4 < len(args):
				self.Soc = args[4]
			if "Soc" in kwargs:
				self.Soc = kwargs["Soc"]
			if  5 < len(args):
				self.SocMax = args[5]
			if "SocMax" in kwargs:
				self.SocMax = kwargs["SocMax"]
			if  6 < len(args):
				self.SocMin = args[6]
			if "SocMin" in kwargs:
				self.SocMin = kwargs["SocMin"]
			if  7 < len(args):
				self.ENom = args[7]
			if "ENom" in kwargs:
				self.ENom = kwargs["ENom"]
			if  8 < len(args):
				self.Limit = args[8]
			if "Limit" in kwargs:
				self.Limit = kwargs["Limit"]
	def __del__(self):
		_services.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'services.BatteryPowerControl{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'services.BatteryPowerControl ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def P(self):
		return _services.services_BatteryPowerControl_P_Get(self.handle)
	@P.setter
	def P(self, value):
		if isinstance(value, go.GoClass):
			_services.services_BatteryPowerControl_P_Set(self.handle, value.handle)
		else:
			_services.services_BatteryPowerControl_P_Set(self.handle, value)
	@property
	def PSet(self):
		return _services.services_BatteryPowerControl_PSet_Get(self.handle)
	@PSet.setter
	def PSet(self, value):
		if isinstance(value, go.GoClass):
			_services.services_BatteryPowerControl_PSet_Set(self.handle, value.handle)
		else:
			_services.services_BatteryPowerControl_PSet_Set(self.handle, value)
	@property
	def PPriority(self):
		return _services.services_BatteryPowerControl_PPriority_Get(self.handle)
	@PPriority.setter
	def PPriority(self, value):
		if isinstance(value, go.GoClass):
			_services.services_BatteryPowerControl_PPriority_Set(self.handle, value.handle)
		else:
			_services.services_BatteryPowerControl_PPriority_Set(self.handle, value)
	@property
	def Q(self):
		return _services.services_BatteryPowerControl_Q_Get(self.handle)
	@Q.setter
	def Q(self, value):
		if isinstance(value, go.GoClass):
			_services.services_BatteryPowerControl_Q_Set(self.handle, value.handle)
		else:
			_services.services_BatteryPowerControl_Q_Set(self.handle, value)
	@property
	def Soc(self):
		return _services.services_BatteryPowerControl_Soc_Get(self.handle)
	@Soc.setter
	def Soc(self, value):
		if isinstance(value, go.GoClass):
			_services.services_BatteryPowerControl_Soc_Set(self.handle, value.handle)
		else:
			_services.services_BatteryPowerControl_Soc_Set(self.handle, value)
	@property
	def SocMax(self):
		return _services.services_BatteryPowerControl_SocMax_Get(self.handle)
	@SocMax.setter
	def SocMax(self, value):
		if isinstance(value, go.GoClass):
			_services.services_BatteryPowerControl_SocMax_Set(self.handle, value.handle)
		else:
			_services.services_BatteryPowerControl_SocMax_Set(self.handle, value)
	@property
	def SocMin(self):
		return _services.services_BatteryPowerControl_SocMin_Get(self.handle)
	@SocMin.setter
	def SocMin(self, value):
		if isinstance(value, go.GoClass):
			_services.services_BatteryPowerControl_SocMin_Set(self.handle, value.handle)
		else:
			_services.services_BatteryPowerControl_SocMin_Set(self.handle, value)
	@property
	def ENom(self):
		return _services.services_BatteryPowerControl_ENom_Get(self.handle)
	@ENom.setter
	def ENom(self, value):
		if isinstance(value, go.GoClass):
			_services.services_BatteryPowerControl_ENom_Set(self.handle, value.handle)
		else:
			_services.services_BatteryPowerControl_ENom_Set(self.handle, value)
	@property
	def Limit(self):
		return Limit(handle=_services.services_BatteryPowerControl_Limit_Get(self.handle))
	@Limit.setter
	def Limit(self, value):
		if isinstance(value, go.GoClass):
			_services.services_BatteryPowerControl_Limit_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))

# Python type for struct services.Limit
class Limit(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_services.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_services.IncRef(self.handle)
		else:
			self.handle = _services.services_Limit_CTor()
			_services.IncRef(self.handle)
			if  0 < len(args):
				self.PMax = args[0]
			if "PMax" in kwargs:
				self.PMax = kwargs["PMax"]
			if  1 < len(args):
				self.PMin = args[1]
			if "PMin" in kwargs:
				self.PMin = kwargs["PMin"]
			if  2 < len(args):
				self.SMax = args[2]
			if "SMax" in kwargs:
				self.SMax = kwargs["SMax"]
			if  3 < len(args):
				self.PFromGrid = args[3]
			if "PFromGrid" in kwargs:
				self.PFromGrid = kwargs["PFromGrid"]
			if  4 < len(args):
				self.PConsumptionMin = args[4]
			if "PConsumptionMin" in kwargs:
				self.PConsumptionMin = kwargs["PConsumptionMin"]
	def __del__(self):
		_services.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'services.Limit{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'services.Limit ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def PMax(self):
		return _services.services_Limit_PMax_Get(self.handle)
	@PMax.setter
	def PMax(self, value):
		if isinstance(value, go.GoClass):
			_services.services_Limit_PMax_Set(self.handle, value.handle)
		else:
			_services.services_Limit_PMax_Set(self.handle, value)
	@property
	def PMin(self):
		return _services.services_Limit_PMin_Get(self.handle)
	@PMin.setter
	def PMin(self, value):
		if isinstance(value, go.GoClass):
			_services.services_Limit_PMin_Set(self.handle, value.handle)
		else:
			_services.services_Limit_PMin_Set(self.handle, value)
	@property
	def SMax(self):
		return _services.services_Limit_SMax_Get(self.handle)
	@SMax.setter
	def SMax(self, value):
		if isinstance(value, go.GoClass):
			_services.services_Limit_SMax_Set(self.handle, value.handle)
		else:
			_services.services_Limit_SMax_Set(self.handle, value)
	@property
	def PFromGrid(self):
		return _services.services_Limit_PFromGrid_Get(self.handle)
	@PFromGrid.setter
	def PFromGrid(self, value):
		if isinstance(value, go.GoClass):
			_services.services_Limit_PFromGrid_Set(self.handle, value.handle)
		else:
			_services.services_Limit_PFromGrid_Set(self.handle, value)
	@property
	def PConsumptionMin(self):
		return _services.services_Limit_PConsumptionMin_Get(self.handle)
	@PConsumptionMin.setter
	def PConsumptionMin(self, value):
		if isinstance(value, go.GoClass):
			_services.services_Limit_PConsumptionMin_Set(self.handle, value.handle)
		else:
			_services.services_Limit_PConsumptionMin_Set(self.handle, value)

# Python type for struct services.LoadPowerControl
class LoadPowerControl(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_services.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_services.IncRef(self.handle)
		else:
			self.handle = _services.services_LoadPowerControl_CTor()
			_services.IncRef(self.handle)
			if  0 < len(args):
				self.P = args[0]
			if "P" in kwargs:
				self.P = kwargs["P"]
			if  1 < len(args):
				self.PSet = args[1]
			if "PSet" in kwargs:
				self.PSet = kwargs["PSet"]
			if  2 < len(args):
				self.PPriority = args[2]
			if "PPriority" in kwargs:
				self.PPriority = kwargs["PPriority"]
			if  3 < len(args):
				self.Q = args[3]
			if "Q" in kwargs:
				self.Q = kwargs["Q"]
			if  4 < len(args):
				self.PMax = args[4]
			if "PMax" in kwargs:
				self.PMax = kwargs["PMax"]
			if  5 < len(args):
				self.PMin = args[5]
			if "PMin" in kwargs:
				self.PMin = kwargs["PMin"]
			if  6 < len(args):
				self.PFromGrid = args[6]
			if "PFromGrid" in kwargs:
				self.PFromGrid = kwargs["PFromGrid"]
			if  7 < len(args):
				self.PConsumptionMin = args[7]
			if "PConsumptionMin" in kwargs:
				self.PConsumptionMin = kwargs["PConsumptionMin"]
	def __del__(self):
		_services.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'services.LoadPowerControl{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'services.LoadPowerControl ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def P(self):
		return _services.services_LoadPowerControl_P_Get(self.handle)
	@P.setter
	def P(self, value):
		if isinstance(value, go.GoClass):
			_services.services_LoadPowerControl_P_Set(self.handle, value.handle)
		else:
			_services.services_LoadPowerControl_P_Set(self.handle, value)
	@property
	def PSet(self):
		return _services.services_LoadPowerControl_PSet_Get(self.handle)
	@PSet.setter
	def PSet(self, value):
		if isinstance(value, go.GoClass):
			_services.services_LoadPowerControl_PSet_Set(self.handle, value.handle)
		else:
			_services.services_LoadPowerControl_PSet_Set(self.handle, value)
	@property
	def PPriority(self):
		return _services.services_LoadPowerControl_PPriority_Get(self.handle)
	@PPriority.setter
	def PPriority(self, value):
		if isinstance(value, go.GoClass):
			_services.services_LoadPowerControl_PPriority_Set(self.handle, value.handle)
		else:
			_services.services_LoadPowerControl_PPriority_Set(self.handle, value)
	@property
	def Q(self):
		return _services.services_LoadPowerControl_Q_Get(self.handle)
	@Q.setter
	def Q(self, value):
		if isinstance(value, go.GoClass):
			_services.services_LoadPowerControl_Q_Set(self.handle, value.handle)
		else:
			_services.services_LoadPowerControl_Q_Set(self.handle, value)
	@property
	def PMax(self):
		return _services.services_LoadPowerControl_PMax_Get(self.handle)
	@PMax.setter
	def PMax(self, value):
		if isinstance(value, go.GoClass):
			_services.services_LoadPowerControl_PMax_Set(self.handle, value.handle)
		else:
			_services.services_LoadPowerControl_PMax_Set(self.handle, value)
	@property
	def PMin(self):
		return _services.services_LoadPowerControl_PMin_Get(self.handle)
	@PMin.setter
	def PMin(self, value):
		if isinstance(value, go.GoClass):
			_services.services_LoadPowerControl_PMin_Set(self.handle, value.handle)
		else:
			_services.services_LoadPowerControl_PMin_Set(self.handle, value)
	@property
	def PFromGrid(self):
		return _services.services_LoadPowerControl_PFromGrid_Get(self.handle)
	@PFromGrid.setter
	def PFromGrid(self, value):
		if isinstance(value, go.GoClass):
			_services.services_LoadPowerControl_PFromGrid_Set(self.handle, value.handle)
		else:
			_services.services_LoadPowerControl_PFromGrid_Set(self.handle, value)
	@property
	def PConsumptionMin(self):
		return _services.services_LoadPowerControl_PConsumptionMin_Get(self.handle)
	@PConsumptionMin.setter
	def PConsumptionMin(self, value):
		if isinstance(value, go.GoClass):
			_services.services_LoadPowerControl_PConsumptionMin_Set(self.handle, value.handle)
		else:
			_services.services_LoadPowerControl_PConsumptionMin_Set(self.handle, value)

# Python type for struct services.Parameter_PO1_B1P1C1
class Parameter_PO1_B1P1C1(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_services.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_services.IncRef(self.handle)
		else:
			self.handle = _services.services_Parameter_PO1_B1P1C1_CTor()
			_services.IncRef(self.handle)
			if  0 < len(args):
				self.SocTarget = args[0]
			if "SocTarget" in kwargs:
				self.SocTarget = kwargs["SocTarget"]
			if  1 < len(args):
				self.SocReserve = args[1]
			if "SocReserve" in kwargs:
				self.SocReserve = kwargs["SocReserve"]
			if  2 < len(args):
				self.DsocTargetHyst = args[2]
			if "DsocTargetHyst" in kwargs:
				self.DsocTargetHyst = kwargs["DsocTargetHyst"]
			if  3 < len(args):
				self.PCutConsumption = args[3]
			if "PCutConsumption" in kwargs:
				self.PCutConsumption = kwargs["PCutConsumption"]
			if  4 < len(args):
				self.PReserve = args[4]
			if "PReserve" in kwargs:
				self.PReserve = kwargs["PReserve"]
			if  5 < len(args):
				self.BatInjectionToGridAllowed = args[5]
			if "BatInjectionToGridAllowed" in kwargs:
				self.BatInjectionToGridAllowed = kwargs["BatInjectionToGridAllowed"]
			if  6 < len(args):
				self.DpPvControl = args[6]
			if "DpPvControl" in kwargs:
				self.DpPvControl = kwargs["DpPvControl"]
	def __del__(self):
		_services.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'services.Parameter_PO1_B1P1C1{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'services.Parameter_PO1_B1P1C1 ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def SocTarget(self):
		return _services.services_Parameter_PO1_B1P1C1_SocTarget_Get(self.handle)
	@SocTarget.setter
	def SocTarget(self, value):
		if isinstance(value, go.GoClass):
			_services.services_Parameter_PO1_B1P1C1_SocTarget_Set(self.handle, value.handle)
		else:
			_services.services_Parameter_PO1_B1P1C1_SocTarget_Set(self.handle, value)
	@property
	def SocReserve(self):
		return _services.services_Parameter_PO1_B1P1C1_SocReserve_Get(self.handle)
	@SocReserve.setter
	def SocReserve(self, value):
		if isinstance(value, go.GoClass):
			_services.services_Parameter_PO1_B1P1C1_SocReserve_Set(self.handle, value.handle)
		else:
			_services.services_Parameter_PO1_B1P1C1_SocReserve_Set(self.handle, value)
	@property
	def DsocTargetHyst(self):
		return _services.services_Parameter_PO1_B1P1C1_DsocTargetHyst_Get(self.handle)
	@DsocTargetHyst.setter
	def DsocTargetHyst(self, value):
		if isinstance(value, go.GoClass):
			_services.services_Parameter_PO1_B1P1C1_DsocTargetHyst_Set(self.handle, value.handle)
		else:
			_services.services_Parameter_PO1_B1P1C1_DsocTargetHyst_Set(self.handle, value)
	@property
	def PCutConsumption(self):
		"""DsocReserveHyst			  float64
		PCutInfeed				  float64
		"""
		return _services.services_Parameter_PO1_B1P1C1_PCutConsumption_Get(self.handle)
	@PCutConsumption.setter
	def PCutConsumption(self, value):
		if isinstance(value, go.GoClass):
			_services.services_Parameter_PO1_B1P1C1_PCutConsumption_Set(self.handle, value.handle)
		else:
			_services.services_Parameter_PO1_B1P1C1_PCutConsumption_Set(self.handle, value)
	@property
	def PReserve(self):
		return _services.services_Parameter_PO1_B1P1C1_PReserve_Get(self.handle)
	@PReserve.setter
	def PReserve(self, value):
		if isinstance(value, go.GoClass):
			_services.services_Parameter_PO1_B1P1C1_PReserve_Set(self.handle, value.handle)
		else:
			_services.services_Parameter_PO1_B1P1C1_PReserve_Set(self.handle, value)
	@property
	def BatInjectionToGridAllowed(self):
		return _services.services_Parameter_PO1_B1P1C1_BatInjectionToGridAllowed_Get(self.handle)
	@BatInjectionToGridAllowed.setter
	def BatInjectionToGridAllowed(self, value):
		if isinstance(value, go.GoClass):
			_services.services_Parameter_PO1_B1P1C1_BatInjectionToGridAllowed_Set(self.handle, value.handle)
		else:
			_services.services_Parameter_PO1_B1P1C1_BatInjectionToGridAllowed_Set(self.handle, value)
	@property
	def DpPvControl(self):
		return _services.services_Parameter_PO1_B1P1C1_DpPvControl_Get(self.handle)
	@DpPvControl.setter
	def DpPvControl(self, value):
		if isinstance(value, go.GoClass):
			_services.services_Parameter_PO1_B1P1C1_DpPvControl_Set(self.handle, value.handle)
		else:
			_services.services_Parameter_PO1_B1P1C1_DpPvControl_Set(self.handle, value)

# Python type for struct services.Poc
class Poc(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_services.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_services.IncRef(self.handle)
		else:
			self.handle = _services.services_Poc_CTor()
			_services.IncRef(self.handle)
			if  0 < len(args):
				self.P = args[0]
			if "P" in kwargs:
				self.P = kwargs["P"]
			if  1 < len(args):
				self.PSet = args[1]
			if "PSet" in kwargs:
				self.PSet = kwargs["PSet"]
			if  2 < len(args):
				self.PPriority = args[2]
			if "PPriority" in kwargs:
				self.PPriority = kwargs["PPriority"]
			if  3 < len(args):
				self.Q = args[3]
			if "Q" in kwargs:
				self.Q = kwargs["Q"]
			if  4 < len(args):
				self.Limit = args[4]
			if "Limit" in kwargs:
				self.Limit = kwargs["Limit"]
	def __del__(self):
		_services.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'services.Poc{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'services.Poc ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def P(self):
		return _services.services_Poc_P_Get(self.handle)
	@P.setter
	def P(self, value):
		if isinstance(value, go.GoClass):
			_services.services_Poc_P_Set(self.handle, value.handle)
		else:
			_services.services_Poc_P_Set(self.handle, value)
	@property
	def PSet(self):
		return _services.services_Poc_PSet_Get(self.handle)
	@PSet.setter
	def PSet(self, value):
		if isinstance(value, go.GoClass):
			_services.services_Poc_PSet_Set(self.handle, value.handle)
		else:
			_services.services_Poc_PSet_Set(self.handle, value)
	@property
	def PPriority(self):
		return _services.services_Poc_PPriority_Get(self.handle)
	@PPriority.setter
	def PPriority(self, value):
		if isinstance(value, go.GoClass):
			_services.services_Poc_PPriority_Set(self.handle, value.handle)
		else:
			_services.services_Poc_PPriority_Set(self.handle, value)
	@property
	def Q(self):
		return _services.services_Poc_Q_Get(self.handle)
	@Q.setter
	def Q(self, value):
		if isinstance(value, go.GoClass):
			_services.services_Poc_Q_Set(self.handle, value.handle)
		else:
			_services.services_Poc_Q_Set(self.handle, value)
	@property
	def Limit(self):
		return Limit(handle=_services.services_Poc_Limit_Get(self.handle))
	@Limit.setter
	def Limit(self, value):
		if isinstance(value, go.GoClass):
			_services.services_Poc_Limit_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))

# Python type for struct services.PvPowerControl
class PvPowerControl(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_services.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_services.IncRef(self.handle)
		else:
			self.handle = _services.services_PvPowerControl_CTor()
			_services.IncRef(self.handle)
			if  0 < len(args):
				self.P = args[0]
			if "P" in kwargs:
				self.P = kwargs["P"]
			if  1 < len(args):
				self.PSet = args[1]
			if "PSet" in kwargs:
				self.PSet = kwargs["PSet"]
			if  2 < len(args):
				self.PPriority = args[2]
			if "PPriority" in kwargs:
				self.PPriority = kwargs["PPriority"]
			if  3 < len(args):
				self.Q = args[3]
			if "Q" in kwargs:
				self.Q = kwargs["Q"]
			if  4 < len(args):
				self.PMax = args[4]
			if "PMax" in kwargs:
				self.PMax = kwargs["PMax"]
			if  5 < len(args):
				self.PMin = args[5]
			if "PMin" in kwargs:
				self.PMin = kwargs["PMin"]
	def __del__(self):
		_services.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'services.PvPowerControl{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'services.PvPowerControl ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def P(self):
		return _services.services_PvPowerControl_P_Get(self.handle)
	@P.setter
	def P(self, value):
		if isinstance(value, go.GoClass):
			_services.services_PvPowerControl_P_Set(self.handle, value.handle)
		else:
			_services.services_PvPowerControl_P_Set(self.handle, value)
	@property
	def PSet(self):
		return _services.services_PvPowerControl_PSet_Get(self.handle)
	@PSet.setter
	def PSet(self, value):
		if isinstance(value, go.GoClass):
			_services.services_PvPowerControl_PSet_Set(self.handle, value.handle)
		else:
			_services.services_PvPowerControl_PSet_Set(self.handle, value)
	@property
	def PPriority(self):
		return _services.services_PvPowerControl_PPriority_Get(self.handle)
	@PPriority.setter
	def PPriority(self, value):
		if isinstance(value, go.GoClass):
			_services.services_PvPowerControl_PPriority_Set(self.handle, value.handle)
		else:
			_services.services_PvPowerControl_PPriority_Set(self.handle, value)
	@property
	def Q(self):
		return _services.services_PvPowerControl_Q_Get(self.handle)
	@Q.setter
	def Q(self, value):
		if isinstance(value, go.GoClass):
			_services.services_PvPowerControl_Q_Set(self.handle, value.handle)
		else:
			_services.services_PvPowerControl_Q_Set(self.handle, value)
	@property
	def PMax(self):
		return _services.services_PvPowerControl_PMax_Get(self.handle)
	@PMax.setter
	def PMax(self, value):
		if isinstance(value, go.GoClass):
			_services.services_PvPowerControl_PMax_Set(self.handle, value.handle)
		else:
			_services.services_PvPowerControl_PMax_Set(self.handle, value)
	@property
	def PMin(self):
		return _services.services_PvPowerControl_PMin_Get(self.handle)
	@PMin.setter
	def PMin(self, value):
		if isinstance(value, go.GoClass):
			_services.services_PvPowerControl_PMin_Set(self.handle, value.handle)
		else:
			_services.services_PvPowerControl_PMin_Set(self.handle, value)

# Python type for struct services.SocState
class SocState(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_services.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_services.IncRef(self.handle)
		else:
			self.handle = _services.services_SocState_CTor()
			_services.IncRef(self.handle)
			if  0 < len(args):
				self.SocBelowTarget = args[0]
			if "SocBelowTarget" in kwargs:
				self.SocBelowTarget = kwargs["SocBelowTarget"]
			if  1 < len(args):
				self.SocBelowReserve = args[1]
			if "SocBelowReserve" in kwargs:
				self.SocBelowReserve = kwargs["SocBelowReserve"]
	def __del__(self):
		_services.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'services.SocState{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'services.SocState ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def SocBelowTarget(self):
		return _services.services_SocState_SocBelowTarget_Get(self.handle)
	@SocBelowTarget.setter
	def SocBelowTarget(self, value):
		if isinstance(value, go.GoClass):
			_services.services_SocState_SocBelowTarget_Set(self.handle, value.handle)
		else:
			_services.services_SocState_SocBelowTarget_Set(self.handle, value)
	@property
	def SocBelowReserve(self):
		return _services.services_SocState_SocBelowReserve_Get(self.handle)
	@SocBelowReserve.setter
	def SocBelowReserve(self, value):
		if isinstance(value, go.GoClass):
			_services.services_SocState_SocBelowReserve_Set(self.handle, value.handle)
		else:
			_services.services_SocState_SocBelowReserve_Set(self.handle, value)


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---


