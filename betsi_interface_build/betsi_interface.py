
# python wrapper for package github.com/tricera-josua-palmstedt/ESF/betsi_interface within overall package betsi_interface
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy build -output=betsi_interface_build ./betsi_interface

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _betsi_interface
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from betsi_interface import betsi_interface
# and then refer to everything using betsi_interface. prefix
# packages imported by this package listed below:




# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---

# Python type for struct betsi_interface.BatteryPowerControl
class BatteryPowerControl(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_betsi_interface.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_betsi_interface.IncRef(self.handle)
		else:
			self.handle = _betsi_interface.betsi_interface_BatteryPowerControl_CTor()
			_betsi_interface.IncRef(self.handle)
			if  0 < len(args):
				self.P = args[0]
			if "P" in kwargs:
				self.P = kwargs["P"]
			if  1 < len(args):
				self.PSet = args[1]
			if "PSet" in kwargs:
				self.PSet = kwargs["PSet"]
			if  2 < len(args):
				self.PPriority = args[2]
			if "PPriority" in kwargs:
				self.PPriority = kwargs["PPriority"]
			if  3 < len(args):
				self.Q = args[3]
			if "Q" in kwargs:
				self.Q = kwargs["Q"]
			if  4 < len(args):
				self.Soc = args[4]
			if "Soc" in kwargs:
				self.Soc = kwargs["Soc"]
			if  5 < len(args):
				self.SocMax = args[5]
			if "SocMax" in kwargs:
				self.SocMax = kwargs["SocMax"]
			if  6 < len(args):
				self.SocMin = args[6]
			if "SocMin" in kwargs:
				self.SocMin = kwargs["SocMin"]
			if  7 < len(args):
				self.PMax = args[7]
			if "PMax" in kwargs:
				self.PMax = kwargs["PMax"]
			if  8 < len(args):
				self.PMin = args[8]
			if "PMin" in kwargs:
				self.PMin = kwargs["PMin"]
			if  9 < len(args):
				self.ENom = args[9]
			if "ENom" in kwargs:
				self.ENom = kwargs["ENom"]
	def __del__(self):
		_betsi_interface.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'betsi_interface.BatteryPowerControl{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'betsi_interface.BatteryPowerControl ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def P(self):
		return _betsi_interface.betsi_interface_BatteryPowerControl_P_Get(self.handle)
	@P.setter
	def P(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_BatteryPowerControl_P_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_BatteryPowerControl_P_Set(self.handle, value)
	@property
	def PSet(self):
		return _betsi_interface.betsi_interface_BatteryPowerControl_PSet_Get(self.handle)
	@PSet.setter
	def PSet(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_BatteryPowerControl_PSet_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_BatteryPowerControl_PSet_Set(self.handle, value)
	@property
	def PPriority(self):
		return _betsi_interface.betsi_interface_BatteryPowerControl_PPriority_Get(self.handle)
	@PPriority.setter
	def PPriority(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_BatteryPowerControl_PPriority_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_BatteryPowerControl_PPriority_Set(self.handle, value)
	@property
	def Q(self):
		return _betsi_interface.betsi_interface_BatteryPowerControl_Q_Get(self.handle)
	@Q.setter
	def Q(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_BatteryPowerControl_Q_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_BatteryPowerControl_Q_Set(self.handle, value)
	@property
	def Soc(self):
		return _betsi_interface.betsi_interface_BatteryPowerControl_Soc_Get(self.handle)
	@Soc.setter
	def Soc(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_BatteryPowerControl_Soc_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_BatteryPowerControl_Soc_Set(self.handle, value)
	@property
	def SocMax(self):
		return _betsi_interface.betsi_interface_BatteryPowerControl_SocMax_Get(self.handle)
	@SocMax.setter
	def SocMax(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_BatteryPowerControl_SocMax_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_BatteryPowerControl_SocMax_Set(self.handle, value)
	@property
	def SocMin(self):
		return _betsi_interface.betsi_interface_BatteryPowerControl_SocMin_Get(self.handle)
	@SocMin.setter
	def SocMin(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_BatteryPowerControl_SocMin_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_BatteryPowerControl_SocMin_Set(self.handle, value)
	@property
	def PMax(self):
		return _betsi_interface.betsi_interface_BatteryPowerControl_PMax_Get(self.handle)
	@PMax.setter
	def PMax(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_BatteryPowerControl_PMax_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_BatteryPowerControl_PMax_Set(self.handle, value)
	@property
	def PMin(self):
		return _betsi_interface.betsi_interface_BatteryPowerControl_PMin_Get(self.handle)
	@PMin.setter
	def PMin(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_BatteryPowerControl_PMin_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_BatteryPowerControl_PMin_Set(self.handle, value)
	@property
	def ENom(self):
		return _betsi_interface.betsi_interface_BatteryPowerControl_ENom_Get(self.handle)
	@ENom.setter
	def ENom(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_BatteryPowerControl_ENom_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_BatteryPowerControl_ENom_Set(self.handle, value)

# Python type for struct betsi_interface.LoadPowerControl
class LoadPowerControl(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_betsi_interface.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_betsi_interface.IncRef(self.handle)
		else:
			self.handle = _betsi_interface.betsi_interface_LoadPowerControl_CTor()
			_betsi_interface.IncRef(self.handle)
			if  0 < len(args):
				self.P = args[0]
			if "P" in kwargs:
				self.P = kwargs["P"]
			if  1 < len(args):
				self.PSet = args[1]
			if "PSet" in kwargs:
				self.PSet = kwargs["PSet"]
			if  2 < len(args):
				self.PPriority = args[2]
			if "PPriority" in kwargs:
				self.PPriority = kwargs["PPriority"]
			if  3 < len(args):
				self.Q = args[3]
			if "Q" in kwargs:
				self.Q = kwargs["Q"]
			if  4 < len(args):
				self.PMax = args[4]
			if "PMax" in kwargs:
				self.PMax = kwargs["PMax"]
			if  5 < len(args):
				self.PMin = args[5]
			if "PMin" in kwargs:
				self.PMin = kwargs["PMin"]
			if  6 < len(args):
				self.PFromGrid = args[6]
			if "PFromGrid" in kwargs:
				self.PFromGrid = kwargs["PFromGrid"]
			if  7 < len(args):
				self.PConsumptionMin = args[7]
			if "PConsumptionMin" in kwargs:
				self.PConsumptionMin = kwargs["PConsumptionMin"]
	def __del__(self):
		_betsi_interface.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'betsi_interface.LoadPowerControl{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'betsi_interface.LoadPowerControl ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def P(self):
		return _betsi_interface.betsi_interface_LoadPowerControl_P_Get(self.handle)
	@P.setter
	def P(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_LoadPowerControl_P_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_LoadPowerControl_P_Set(self.handle, value)
	@property
	def PSet(self):
		return _betsi_interface.betsi_interface_LoadPowerControl_PSet_Get(self.handle)
	@PSet.setter
	def PSet(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_LoadPowerControl_PSet_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_LoadPowerControl_PSet_Set(self.handle, value)
	@property
	def PPriority(self):
		return _betsi_interface.betsi_interface_LoadPowerControl_PPriority_Get(self.handle)
	@PPriority.setter
	def PPriority(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_LoadPowerControl_PPriority_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_LoadPowerControl_PPriority_Set(self.handle, value)
	@property
	def Q(self):
		return _betsi_interface.betsi_interface_LoadPowerControl_Q_Get(self.handle)
	@Q.setter
	def Q(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_LoadPowerControl_Q_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_LoadPowerControl_Q_Set(self.handle, value)
	@property
	def PMax(self):
		return _betsi_interface.betsi_interface_LoadPowerControl_PMax_Get(self.handle)
	@PMax.setter
	def PMax(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_LoadPowerControl_PMax_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_LoadPowerControl_PMax_Set(self.handle, value)
	@property
	def PMin(self):
		return _betsi_interface.betsi_interface_LoadPowerControl_PMin_Get(self.handle)
	@PMin.setter
	def PMin(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_LoadPowerControl_PMin_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_LoadPowerControl_PMin_Set(self.handle, value)
	@property
	def PFromGrid(self):
		return _betsi_interface.betsi_interface_LoadPowerControl_PFromGrid_Get(self.handle)
	@PFromGrid.setter
	def PFromGrid(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_LoadPowerControl_PFromGrid_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_LoadPowerControl_PFromGrid_Set(self.handle, value)
	@property
	def PConsumptionMin(self):
		return _betsi_interface.betsi_interface_LoadPowerControl_PConsumptionMin_Get(self.handle)
	@PConsumptionMin.setter
	def PConsumptionMin(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_LoadPowerControl_PConsumptionMin_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_LoadPowerControl_PConsumptionMin_Set(self.handle, value)

# Python type for struct betsi_interface.PvPowerControl
class PvPowerControl(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_betsi_interface.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_betsi_interface.IncRef(self.handle)
		else:
			self.handle = _betsi_interface.betsi_interface_PvPowerControl_CTor()
			_betsi_interface.IncRef(self.handle)
			if  0 < len(args):
				self.P = args[0]
			if "P" in kwargs:
				self.P = kwargs["P"]
			if  1 < len(args):
				self.PSet = args[1]
			if "PSet" in kwargs:
				self.PSet = kwargs["PSet"]
			if  2 < len(args):
				self.PPriority = args[2]
			if "PPriority" in kwargs:
				self.PPriority = kwargs["PPriority"]
			if  3 < len(args):
				self.Q = args[3]
			if "Q" in kwargs:
				self.Q = kwargs["Q"]
			if  4 < len(args):
				self.PMax = args[4]
			if "PMax" in kwargs:
				self.PMax = kwargs["PMax"]
			if  5 < len(args):
				self.PMin = args[5]
			if "PMin" in kwargs:
				self.PMin = kwargs["PMin"]
	def __del__(self):
		_betsi_interface.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'betsi_interface.PvPowerControl{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'betsi_interface.PvPowerControl ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def P(self):
		return _betsi_interface.betsi_interface_PvPowerControl_P_Get(self.handle)
	@P.setter
	def P(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_PvPowerControl_P_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_PvPowerControl_P_Set(self.handle, value)
	@property
	def PSet(self):
		return _betsi_interface.betsi_interface_PvPowerControl_PSet_Get(self.handle)
	@PSet.setter
	def PSet(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_PvPowerControl_PSet_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_PvPowerControl_PSet_Set(self.handle, value)
	@property
	def PPriority(self):
		return _betsi_interface.betsi_interface_PvPowerControl_PPriority_Get(self.handle)
	@PPriority.setter
	def PPriority(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_PvPowerControl_PPriority_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_PvPowerControl_PPriority_Set(self.handle, value)
	@property
	def Q(self):
		return _betsi_interface.betsi_interface_PvPowerControl_Q_Get(self.handle)
	@Q.setter
	def Q(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_PvPowerControl_Q_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_PvPowerControl_Q_Set(self.handle, value)
	@property
	def PMax(self):
		return _betsi_interface.betsi_interface_PvPowerControl_PMax_Get(self.handle)
	@PMax.setter
	def PMax(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_PvPowerControl_PMax_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_PvPowerControl_PMax_Set(self.handle, value)
	@property
	def PMin(self):
		return _betsi_interface.betsi_interface_PvPowerControl_PMin_Get(self.handle)
	@PMin.setter
	def PMin(self, value):
		if isinstance(value, go.GoClass):
			_betsi_interface.betsi_interface_PvPowerControl_PMin_Set(self.handle, value.handle)
		else:
			_betsi_interface.betsi_interface_PvPowerControl_PMin_Set(self.handle, value)


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---


